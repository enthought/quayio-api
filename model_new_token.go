/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NewToken Description of a new token.
type NewToken struct {
	// Friendly name to help identify the token
	FriendlyName string `json:"friendlyName"`
}

// NewNewToken instantiates a new NewToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewToken(friendlyName string) *NewToken {
	this := NewToken{}
	this.FriendlyName = friendlyName
	return &this
}

// NewNewTokenWithDefaults instantiates a new NewToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewTokenWithDefaults() *NewToken {
	this := NewToken{}
	return &this
}

// GetFriendlyName returns the FriendlyName field value
func (o *NewToken) GetFriendlyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value
// and a boolean to check if the value has been set.
func (o *NewToken) GetFriendlyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FriendlyName, true
}

// SetFriendlyName sets field value
func (o *NewToken) SetFriendlyName(v string) {
	o.FriendlyName = v
}

func (o NewToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["friendlyName"] = o.FriendlyName
	}
	return json.Marshal(toSerialize)
}

type NullableNewToken struct {
	value *NewToken
	isSet bool
}

func (v NullableNewToken) Get() *NewToken {
	return v.value
}

func (v *NullableNewToken) Set(val *NewToken) {
	v.value = val
	v.isSet = true
}

func (v NullableNewToken) IsSet() bool {
	return v.isSet
}

func (v *NullableNewToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewToken(val *NewToken) *NullableNewToken {
	return &NullableNewToken{value: val, isSet: true}
}

func (v NullableNewToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

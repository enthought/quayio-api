/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NewPrototype Description of a new prototype
type NewPrototype struct {
	ActivatingUser *NewPrototypeActivatingUser `json:"activating_user,omitempty"`
	// Role that should be applied to the delegate
	Role     string               `json:"role"`
	Delegate NewPrototypeDelegate `json:"delegate"`
}

// NewNewPrototype instantiates a new NewPrototype object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewPrototype(role string, delegate NewPrototypeDelegate) *NewPrototype {
	this := NewPrototype{}
	this.Role = role
	this.Delegate = delegate
	return &this
}

// NewNewPrototypeWithDefaults instantiates a new NewPrototype object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewPrototypeWithDefaults() *NewPrototype {
	this := NewPrototype{}
	return &this
}

// GetActivatingUser returns the ActivatingUser field value if set, zero value otherwise.
func (o *NewPrototype) GetActivatingUser() NewPrototypeActivatingUser {
	if o == nil || o.ActivatingUser == nil {
		var ret NewPrototypeActivatingUser
		return ret
	}
	return *o.ActivatingUser
}

// GetActivatingUserOk returns a tuple with the ActivatingUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewPrototype) GetActivatingUserOk() (*NewPrototypeActivatingUser, bool) {
	if o == nil || o.ActivatingUser == nil {
		return nil, false
	}
	return o.ActivatingUser, true
}

// HasActivatingUser returns a boolean if a field has been set.
func (o *NewPrototype) HasActivatingUser() bool {
	if o != nil && o.ActivatingUser != nil {
		return true
	}

	return false
}

// SetActivatingUser gets a reference to the given NewPrototypeActivatingUser and assigns it to the ActivatingUser field.
func (o *NewPrototype) SetActivatingUser(v NewPrototypeActivatingUser) {
	o.ActivatingUser = &v
}

// GetRole returns the Role field value
func (o *NewPrototype) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *NewPrototype) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *NewPrototype) SetRole(v string) {
	o.Role = v
}

// GetDelegate returns the Delegate field value
func (o *NewPrototype) GetDelegate() NewPrototypeDelegate {
	if o == nil {
		var ret NewPrototypeDelegate
		return ret
	}

	return o.Delegate
}

// GetDelegateOk returns a tuple with the Delegate field value
// and a boolean to check if the value has been set.
func (o *NewPrototype) GetDelegateOk() (*NewPrototypeDelegate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delegate, true
}

// SetDelegate sets field value
func (o *NewPrototype) SetDelegate(v NewPrototypeDelegate) {
	o.Delegate = v
}

func (o NewPrototype) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivatingUser != nil {
		toSerialize["activating_user"] = o.ActivatingUser
	}
	if true {
		toSerialize["role"] = o.Role
	}
	if true {
		toSerialize["delegate"] = o.Delegate
	}
	return json.Marshal(toSerialize)
}

type NullableNewPrototype struct {
	value *NewPrototype
	isSet bool
}

func (v NullableNewPrototype) Get() *NewPrototype {
	return v.value
}

func (v *NullableNewPrototype) Set(val *NewPrototype) {
	v.value = val
	v.isSet = true
}

func (v NullableNewPrototype) IsSet() bool {
	return v.isSet
}

func (v *NullableNewPrototype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewPrototype(val *NewPrototype) *NullableNewPrototype {
	return &NullableNewPrototype{value: val, isSet: true}
}

func (v NullableNewPrototype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewPrototype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RepoUpdate Fields which can be updated in a repository.
type RepoUpdate struct {
	// Markdown encoded description for the repository
	Description string `json:"description"`
}

// NewRepoUpdate instantiates a new RepoUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepoUpdate(description string) *RepoUpdate {
	this := RepoUpdate{}
	this.Description = description
	return &this
}

// NewRepoUpdateWithDefaults instantiates a new RepoUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepoUpdateWithDefaults() *RepoUpdate {
	this := RepoUpdate{}
	return &this
}

// GetDescription returns the Description field value
func (o *RepoUpdate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RepoUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RepoUpdate) SetDescription(v string) {
	o.Description = v
}

func (o RepoUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableRepoUpdate struct {
	value *RepoUpdate
	isSet bool
}

func (v NullableRepoUpdate) Get() *RepoUpdate {
	return v.value
}

func (v *NullableRepoUpdate) Set(val *RepoUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRepoUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRepoUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepoUpdate(val *RepoUpdate) *NullableRepoUpdate {
	return &NullableRepoUpdate{value: val, isSet: true}
}

func (v NullableRepoUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepoUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UpdateUser Fields which can be updated in a user.
type UpdateUser struct {
	// The user's username
	Username *string `json:"username,omitempty"`
	// Whether the user desires to receive an invoice email.
	InvoiceEmail *bool `json:"invoice_email,omitempty"`
	// The user's password
	Password *string `json:"password,omitempty"`
	// The user's email address
	Email *string `json:"email,omitempty"`
	// The number of seconds for tag expiration
	TagExpirationS *int32 `json:"tag_expiration_s,omitempty"`
}

// NewUpdateUser instantiates a new UpdateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUser() *UpdateUser {
	this := UpdateUser{}
	return &this
}

// NewUpdateUserWithDefaults instantiates a new UpdateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserWithDefaults() *UpdateUser {
	this := UpdateUser{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateUser) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateUser) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateUser) SetUsername(v string) {
	o.Username = &v
}

// GetInvoiceEmail returns the InvoiceEmail field value if set, zero value otherwise.
func (o *UpdateUser) GetInvoiceEmail() bool {
	if o == nil || o.InvoiceEmail == nil {
		var ret bool
		return ret
	}
	return *o.InvoiceEmail
}

// GetInvoiceEmailOk returns a tuple with the InvoiceEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetInvoiceEmailOk() (*bool, bool) {
	if o == nil || o.InvoiceEmail == nil {
		return nil, false
	}
	return o.InvoiceEmail, true
}

// HasInvoiceEmail returns a boolean if a field has been set.
func (o *UpdateUser) HasInvoiceEmail() bool {
	if o != nil && o.InvoiceEmail != nil {
		return true
	}

	return false
}

// SetInvoiceEmail gets a reference to the given bool and assigns it to the InvoiceEmail field.
func (o *UpdateUser) SetInvoiceEmail(v bool) {
	o.InvoiceEmail = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateUser) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateUser) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateUser) SetPassword(v string) {
	o.Password = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUser) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUser) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUser) SetEmail(v string) {
	o.Email = &v
}

// GetTagExpirationS returns the TagExpirationS field value if set, zero value otherwise.
func (o *UpdateUser) GetTagExpirationS() int32 {
	if o == nil || o.TagExpirationS == nil {
		var ret int32
		return ret
	}
	return *o.TagExpirationS
}

// GetTagExpirationSOk returns a tuple with the TagExpirationS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetTagExpirationSOk() (*int32, bool) {
	if o == nil || o.TagExpirationS == nil {
		return nil, false
	}
	return o.TagExpirationS, true
}

// HasTagExpirationS returns a boolean if a field has been set.
func (o *UpdateUser) HasTagExpirationS() bool {
	if o != nil && o.TagExpirationS != nil {
		return true
	}

	return false
}

// SetTagExpirationS gets a reference to the given int32 and assigns it to the TagExpirationS field.
func (o *UpdateUser) SetTagExpirationS(v int32) {
	o.TagExpirationS = &v
}

func (o UpdateUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.InvoiceEmail != nil {
		toSerialize["invoice_email"] = o.InvoiceEmail
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.TagExpirationS != nil {
		toSerialize["tag_expiration_s"] = o.TagExpirationS
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUser struct {
	value *UpdateUser
	isSet bool
}

func (v NullableUpdateUser) Get() *UpdateUser {
	return v.value
}

func (v *NullableUpdateUser) Set(val *UpdateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUser(val *UpdateUser) *NullableUpdateUser {
	return &NullableUpdateUser{value: val, isSet: true}
}

func (v NullableUpdateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

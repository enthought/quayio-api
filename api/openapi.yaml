openapi: 3.0.1
info:
  contact:
    email: support@quay.io
  description: This API allows you to perform many of the operations required to work
    with Quay repositories, users, and organizations. You can find out more at <a
    href="https://quay.io">Quay</a>.
  termsOfService: https://quay.io/tos
  title: Quay Frontend
  version: v1
servers:
- url: https://quay.io/
tags:
- description: Billing information, subscriptions, and plan information.
  name: billing
- description: Create, list, cancel and get status/logs of repository builds.
  name: build
- description: API discovery information.
  name: discovery
- description: Error details API.
  name: error
- description: Messages API.
  name: globalmessages
- description: List and lookup repository images.
  name: image
- description: Access usage logs for organizations or repositories.
  name: logs
- description: Manage the manifests of a repository.
  name: manifest
- description: Manage organizations, members and OAuth applications.
  name: organization
- description: Manage repository permissions.
  name: permission
- description: Manage default permissions added to repositories.
  name: prototype
- description: List, create and manage repositories.
  name: repository
- description: List, create and manage repository events/notifications.
  name: repositorynotification
- description: Manage repository access tokens (DEPRECATED).
  name: repotoken
- description: Manage user and organization robot accounts.
  name: robot
- description: Conduct searches against all registry context.
  name: search
- description: List and manage repository vulnerabilities and other security information.
  name: secscan
- description: List and manage repository signing information.
  name: signing
- description: Manage the tags of a repository.
  name: tag
- description: Create, list and manage an organization's teams.
  name: team
- description: Create, list and manage build triggers.
  name: trigger
- description: Manage the current user.
  name: user
- description: ""
  name: userfiles
paths:
  /api/v1/organization/{orgname}/invoices:
    get:
      description: List the invoices for the specified orgnaization.
      operationId: listOrgInvoices
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - billing
    x-name: endpoints.api.billing.OrganizationInvoiceList
    x-tag: billing
    x-path: /api/v1/organization/{orgname}/invoices
  /api/v1/plans/:
    get:
      description: List the avaialble plans.
      operationId: listPlans
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - billing
    x-name: endpoints.api.billing.ListPlans
    x-tag: billing
    x-path: /api/v1/plans/
  /api/v1/repository/{repository}/build/:
    get:
      description: Get the list of repository builds.
      operationId: getRepoBuilds
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: Returns all builds since the given unix timecode
        in: query
        name: since
        schema:
          type: integer
      - description: The maximum number of builds to return
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    post:
      description: Request that a repository be built and pushed from the specified
        input.
      operationId: requestRepoBuild
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RepositoryBuildRequest'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - build
      x-codegen-request-body-name: body
    x-name: endpoints.api.build.RepositoryBuildList
    x-path: /api/v1/repository/{repository}/build/
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}/status:
    get:
      description: Return the status for the builds specified by the build uuids.
      operationId: getRepoBuildStatus
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    x-name: endpoints.api.build.RepositoryBuildStatus
    x-tag: build
    x-path: /api/v1/repository/{repository}/build/{build_uuid}/status
  /api/v1/repository/{repository}/build/{build_uuid}:
    delete:
      description: Cancels a repository build.
      operationId: cancelRepoBuild
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - build
    get:
      description: Returns information about a build.
      operationId: getRepoBuild
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    x-name: endpoints.api.build.RepositoryBuildResource
    x-path: /api/v1/repository/{repository}/build/{build_uuid}
    x-tag: build
  /api/v1/repository/{repository}/build/{build_uuid}/logs:
    get:
      description: Return the build logs for the build specified by the build uuid.
      operationId: getRepoBuildLogs
      parameters:
      - description: The UUID of the build
        in: path
        name: build_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - build
    x-name: endpoints.api.build.RepositoryBuildLogs
    x-tag: build
    x-path: /api/v1/repository/{repository}/build/{build_uuid}/logs
  /api/v1/discovery:
    get:
      description: List all of the API endpoints available in the swagger API format.
      operationId: discovery
      parameters:
      - description: Whether to include internal APIs.
        in: query
        name: internal
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - discovery
    x-name: endpoints.api.discovery.DiscoveryResource
    x-tag: discovery
    x-path: /api/v1/discovery
  /api/v1/error/{error_type}:
    get:
      description: Get a detailed description of the error.
      operationId: getErrorDescription
      parameters:
      - description: The error code identifying the type of error.
        in: path
        name: error_type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiErrorDescription'
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - error
    x-name: endpoints.api.error.Error
    x-tag: error
    x-path: /api/v1/error/{error_type}
  /api/v1/messages:
    get:
      description: Return a super users messages.
      operationId: getGlobalMessages
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - globalmessages
    post:
      description: Create a message.
      operationId: createGlobalMessage
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateMessage'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - super:user
      tags:
      - globalmessages
      x-codegen-request-body-name: body
    x-name: endpoints.api.globalmessages.GlobalUserMessages
    x-tag: globalmessages
    x-path: /api/v1/messages
  /api/v1/repository/{repository}/image/:
    get:
      description: List the images for the specified repository.
      operationId: listRepositoryImages
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - image
    x-name: endpoints.api.image.RepositoryImageList
    x-tag: image
    x-path: /api/v1/repository/{repository}/image/
  /api/v1/repository/{repository}/image/{image_id}:
    get:
      description: Get the information available for the specified image.
      operationId: getImage
      parameters:
      - description: The Docker image ID
        in: path
        name: image_id
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - image
    x-name: endpoints.api.image.RepositoryImage
    x-tag: image
    x-path: /api/v1/repository/{repository}/image/{image_id}
  /api/v1/organization/{orgname}/logs:
    get:
      description: List the logs for the specified organization.
      operationId: listOrgLogs
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The page token for the next page
        in: query
        name: next_page
        schema:
          type: string
      - description: Username for which to filter logs.
        in: query
        name: performer
        schema:
          type: string
      - description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        in: query
        name: endtime
        schema:
          type: string
      - description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        in: query
        name: starttime
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - logs
    x-name: endpoints.api.logs.OrgLogs
    x-tag: logs
    x-path: /api/v1/organization/{orgname}/logs
  /api/v1/repository/{repository}/logs:
    get:
      description: List the logs for the specified repository.
      operationId: listRepoLogs
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: The page token for the next page
        in: query
        name: next_page
        schema:
          type: string
      - description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        in: query
        name: endtime
        schema:
          type: string
      - description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        in: query
        name: starttime
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - logs
    x-name: endpoints.api.logs.RepositoryLogs
    x-tag: logs
    x-path: /api/v1/repository/{repository}/logs
  /api/v1/user/logs:
    get:
      description: List the logs for the current user.
      operationId: listUserLogs
      parameters:
      - description: The page token for the next page
        in: query
        name: next_page
        schema:
          type: string
      - description: Username for which to filter logs.
        in: query
        name: performer
        schema:
          type: string
      - description: 'Latest time for logs. Format: "%m/%d/%Y" in UTC.'
        in: query
        name: endtime
        schema:
          type: string
      - description: 'Earliest time for logs. Format: "%m/%d/%Y" in UTC.'
        in: query
        name: starttime
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - logs
    x-name: endpoints.api.logs.UserLogs
    x-tag: logs
    x-path: /api/v1/user/logs
  /api/v1/repository/{repository}/manifest/{manifestref}/labels:
    get:
      operationId: listManifestLabels
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: If specified, only labels matching the given prefix will be returned
        in: query
        name: filter
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - manifest
    post:
      description: Adds a new label into the tag manifest.
      operationId: addManifestLabel
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddLabel'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - manifest
      x-codegen-request-body-name: body
    x-name: endpoints.api.manifest.RepositoryManifestLabels
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/labels
    x-tag: manifest
  /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}:
    delete:
      description: Deletes an existing label from a manifest.
      operationId: deleteManifestLabel
      parameters:
      - description: The ID of the label
        in: path
        name: labelid
        required: true
        schema:
          type: string
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - manifest
    get:
      description: Retrieves the label with the specific ID under the manifest.
      operationId: getManifestLabel
      parameters:
      - description: The ID of the label
        in: path
        name: labelid
        required: true
        schema:
          type: string
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - manifest
    x-name: endpoints.api.manifest.ManageRepositoryManifestLabel
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}
    x-tag: manifest
  /api/v1/repository/{repository}/manifest/{manifestref}:
    get:
      operationId: getRepoManifest
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - manifest
    x-name: endpoints.api.manifest.RepositoryManifest
    x-tag: manifest
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}
  /api/v1/organization/{orgname}/members/{membername}:
    delete:
      description: |-
        Removes a member from an organization, revoking all its repository priviledges and removing
                it from all teams in the organization.
      operationId: removeOrganizationMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The username of the organization member
        in: path
        name: membername
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    get:
      description: Retrieves the details of a member of the organization.
      operationId: getOrganizationMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The username of the organization member
        in: path
        name: membername
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    x-name: endpoints.api.organization.OrganizationMember
    x-path: /api/v1/organization/{orgname}/members/{membername}
    x-tag: organization
  /api/v1/organization/{orgname}:
    delete:
      description: Deletes the specified organization.
      operationId: deleteAdminedOrganization
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    get:
      description: Get the details for the specified organization.
      operationId: getOrganization
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - organization
    put:
      description: Change the details for the specified organization.
      operationId: changeOrganizationDetails
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateOrg'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
      x-codegen-request-body-name: body
    x-name: endpoints.api.organization.Organization
    x-path: /api/v1/organization/{orgname}
    x-tag: organization
  /api/v1/organization/{orgname}/collaborators:
    get:
      description: List outside collaborators of the specified organization.
      operationId: getOrganizationCollaborators
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    x-name: endpoints.api.organization.OrganizationCollaboratorList
    x-tag: organization
    x-path: /api/v1/organization/{orgname}/collaborators
  /api/v1/organization/{orgname}/applications/{client_id}:
    delete:
      description: Deletes the application under this organization.
      operationId: deleteOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    get:
      description: Retrieves the application with the specified client_id under the
        specified organization.
      operationId: getOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    put:
      description: Updates an application under this organization.
      operationId: updateOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateApp'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
      x-codegen-request-body-name: body
    x-name: endpoints.api.organization.OrganizationApplicationResource
    x-path: /api/v1/organization/{orgname}/applications/{client_id}
    x-tag: organization
  /api/v1/organization/:
    post:
      description: Create a new organization.
      operationId: createOrganization
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewOrg'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - organization
      x-codegen-request-body-name: body
    x-name: endpoints.api.organization.OrganizationList
    x-tag: organization
    x-path: /api/v1/organization/
  /api/v1/app/{client_id}:
    get:
      description: Get information on the specified application.
      operationId: getApplicationInformation
      parameters:
      - description: The OAuth client ID
        in: path
        name: client_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - organization
    x-name: endpoints.api.organization.ApplicationInformation
    x-tag: organization
    x-path: /api/v1/app/{client_id}
  /api/v1/organization/{orgname}/applications:
    get:
      description: List the applications for the specified organization.
      operationId: getOrganizationApplications
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    post:
      description: Creates a new application under this organization.
      operationId: createOrganizationApplication
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewApp'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
      x-codegen-request-body-name: body
    x-name: endpoints.api.organization.OrganizationApplications
    x-path: /api/v1/organization/{orgname}/applications
    x-tag: organization
  /api/v1/organization/{orgname}/members:
    get:
      description: List the human members of the specified organization.
      operationId: getOrganizationMembers
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - organization
    x-name: endpoints.api.organization.OrganizationMemberList
    x-tag: organization
    x-path: /api/v1/organization/{orgname}/members
  /api/v1/repository/{repository}/permissions/team/{teamname}:
    delete:
      description: Delete the permission for the specified team.
      operationId: deleteTeamPermissions
      parameters:
      - description: The name of the team to which the permission applies
        in: path
        name: teamname
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    get:
      description: Fetch the permission for the specified team.
      operationId: getTeamPermissions
      parameters:
      - description: The name of the team to which the permission applies
        in: path
        name: teamname
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    put:
      description: Update the existing team permission.
      operationId: changeTeamPermissions
      parameters:
      - description: The name of the team to which the permission applies
        in: path
        name: teamname
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TeamPermission'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
      x-codegen-request-body-name: body
    x-name: endpoints.api.permission.RepositoryTeamPermission
    x-path: /api/v1/repository/{repository}/permissions/team/{teamname}
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/:
    get:
      description: List all user permissions.
      operationId: listRepoUserPermissions
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    x-name: endpoints.api.permission.RepositoryUserPermissionList
    x-tag: permission
    x-path: /api/v1/repository/{repository}/permissions/user/
  /api/v1/repository/{repository}/permissions/team/:
    get:
      description: List all team permission.
      operationId: listRepoTeamPermissions
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    x-name: endpoints.api.permission.RepositoryTeamPermissionList
    x-tag: permission
    x-path: /api/v1/repository/{repository}/permissions/team/
  /api/v1/repository/{repository}/permissions/user/{username}:
    delete:
      description: Delete the permission for the user.
      operationId: deleteUserPermissions
      parameters:
      - description: The username of the user to which the permission applies
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    get:
      description: Get the permission for the specified user.
      operationId: getUserPermissions
      parameters:
      - description: The username of the user to which the permission applies
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    put:
      description: Update the perimssions for an existing repository.
      operationId: changeUserPermissions
      parameters:
      - description: The username of the user to which the permission applies
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserPermission'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
      x-codegen-request-body-name: body
    x-name: endpoints.api.permission.RepositoryUserPermission
    x-path: /api/v1/repository/{repository}/permissions/user/{username}
    x-tag: permission
  /api/v1/repository/{repository}/permissions/user/{username}/transitive:
    get:
      description: Get the fetch the permission for the specified user.
      operationId: getUserTransitivePermission
      parameters:
      - description: The username of the user to which the permissions apply
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - permission
    x-name: endpoints.api.permission.RepositoryUserTransitivePermission
    x-tag: permission
    x-path: /api/v1/repository/{repository}/permissions/user/{username}/transitive
  /api/v1/organization/{orgname}/prototypes:
    get:
      description: List the existing prototypes for this organization.
      operationId: getOrganizationPrototypePermissions
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
    post:
      description: Create a new permission prototype.
      operationId: createOrganizationPrototypePermission
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewPrototype'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
      x-codegen-request-body-name: body
    x-name: endpoints.api.prototype.PermissionPrototypeList
    x-path: /api/v1/organization/{orgname}/prototypes
    x-tag: prototype
  /api/v1/organization/{orgname}/prototypes/{prototypeid}:
    delete:
      description: Delete an existing permission prototype.
      operationId: deleteOrganizationPrototypePermission
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The ID of the prototype
        in: path
        name: prototypeid
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
    put:
      description: Update the role of an existing permission prototype.
      operationId: updateOrganizationPrototypePermission
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The ID of the prototype
        in: path
        name: prototypeid
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PrototypeUpdate'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - prototype
      x-codegen-request-body-name: body
    x-name: endpoints.api.prototype.PermissionPrototype
    x-path: /api/v1/organization/{orgname}/prototypes/{prototypeid}
    x-tag: prototype
  /api/v1/repository/{repository}/changetrust:
    post:
      description: Change the visibility of a repository.
      operationId: changeRepoTrust
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangeRepoTrust'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repository
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.RepositoryTrust
    x-tag: repository
    x-path: /api/v1/repository/{repository}/changetrust
  /api/v1/repository:
    get:
      description: Fetch the list of repositories visible to the current user under
        a variety of situations.
      operationId: listRepos
      parameters:
      - description: The page token for the next page
        in: query
        name: next_page
        schema:
          type: string
      - description: The kind of repositories to return
        in: query
        name: repo_kind
        schema:
          type: string
      - description: Whether to include the repository's popularity metric.
        in: query
        name: popularity
        schema:
          type: boolean
      - description: Whether to include when the repository was last modified.
        in: query
        name: last_modified
        schema:
          type: boolean
      - description: Adds any repositories visible to the user by virtue of being
          public
        in: query
        name: public
        schema:
          type: boolean
      - description: Filters the repositories returned to those starred by the user
        in: query
        name: starred
        schema:
          type: boolean
      - description: Filters the repositories returned to this namespace
        in: query
        name: namespace
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - repository
    post:
      description: Create a new repository.
      operationId: createRepo
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewRepo'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:create
      tags:
      - repository
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.RepositoryList
    x-tag: repository
    x-path: /api/v1/repository
  /api/v1/repository/{repository}/changevisibility:
    post:
      description: Change the visibility of a repository.
      operationId: changeRepoVisibility
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangeVisibility'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repository
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.RepositoryVisibility
    x-tag: repository
    x-path: /api/v1/repository/{repository}/changevisibility
  /api/v1/repository/{repository}:
    delete:
      description: Delete a repository.
      operationId: deleteRepository
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repository
    get:
      description: Fetch the specified repository.
      operationId: getRepo
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: Whether to include repository tags
        in: query
        name: includeTags
        schema:
          type: boolean
      - description: Whether to include action statistics
        in: query
        name: includeStats
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - repository
    put:
      description: Update the description in the specified repository.
      operationId: updateRepo
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RepoUpdate'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - repository
      x-codegen-request-body-name: body
    x-name: endpoints.api.repository.Repository
    x-path: /api/v1/repository/{repository}
    x-tag: repository
  /api/v1/repository/{repository}/notification/{uuid}/test:
    post:
      description: Queues a test notification for this repository.
      operationId: testRepoNotification
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    x-name: endpoints.api.repositorynotification.TestRepositoryNotification
    x-tag: repositorynotification
    x-path: /api/v1/repository/{repository}/notification/{uuid}/test
  /api/v1/repository/{repository}/notification/{uuid}:
    delete:
      description: Deletes the specified notification.
      operationId: deleteRepoNotification
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    get:
      description: Get information for the specified notification.
      operationId: getRepoNotification
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    post:
      description: Resets repository notification to 0 failures.
      operationId: resetRepositoryNotificationFailures
      parameters:
      - description: The UUID of the notification
        in: path
        name: uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    x-name: endpoints.api.repositorynotification.RepositoryNotification
    x-path: /api/v1/repository/{repository}/notification/{uuid}
    x-tag: repositorynotification
  /api/v1/repository/{repository}/notification/:
    get:
      description: List the notifications for the specified repository.
      operationId: listRepoNotifications
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
    post:
      operationId: createRepoNotification
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NotificationCreateRequest'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repositorynotification
      x-codegen-request-body-name: body
    x-name: endpoints.api.repositorynotification.RepositoryNotificationList
    x-path: /api/v1/repository/{repository}/notification/
    x-tag: repositorynotification
  /api/v1/repository/{repository}/tokens/:
    get:
      description: List the tokens for the specified repository.
      operationId: listRepoTokens
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    post:
      description: Create a new repository token.
      operationId: createToken
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewToken'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
      x-codegen-request-body-name: body
    x-name: endpoints.api.repotoken.RepositoryTokenList
    x-path: /api/v1/repository/{repository}/tokens/
    x-tag: repotoken
  /api/v1/repository/{repository}/tokens/{code}:
    delete:
      description: Delete the repository token.
      operationId: deleteToken
      parameters:
      - description: The token code
        in: path
        name: code
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    get:
      description: Fetch the specified repository token information.
      operationId: getTokens
      parameters:
      - description: The token code
        in: path
        name: code
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
    put:
      description: Update the permissions for the specified repository token.
      operationId: changeToken
      parameters:
      - description: The token code
        in: path
        name: code
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenPermission'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - repotoken
      x-codegen-request-body-name: body
    x-name: endpoints.api.repotoken.RepositoryToken
    x-path: /api/v1/repository/{repository}/tokens/{code}
    x-tag: repotoken
  /api/v1/user/robots:
    get:
      description: List the available robots for the user.
      operationId: getUserRobots
      parameters:
      - description: If specified, the number of robots to return.
        in: query
        name: limit
        schema:
          type: integer
      - description: If false, the robot's token is not returned.
        in: query
        name: token
        schema:
          type: boolean
      - description: Whether to include repositories and teams in which the robots
          have permission.
        in: query
        name: permissions
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.UserRobotList
    x-tag: robot
    x-path: /api/v1/user/robots
  /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions:
    get:
      description: Returns the list of repository permissions for the org's robot.
      operationId: getOrgRobotPermissions
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.OrgRobotPermissions
    x-tag: robot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions
  /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate:
    post:
      description: Regenerates the token for an organization robot.
      operationId: regenerateOrgRobotToken
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    x-name: endpoints.api.robot.RegenerateOrgRobot
    x-tag: robot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate
  /api/v1/organization/{orgname}/robots:
    get:
      description: List the organization's robots.
      operationId: getOrgRobots
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: If specified, the number of robots to return.
        in: query
        name: limit
        schema:
          type: integer
      - description: If false, the robot's token is not returned.
        in: query
        name: token
        schema:
          type: boolean
      - description: Whether to include repostories and teams in which the robots
          have permission.
        in: query
        name: permissions
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    x-name: endpoints.api.robot.OrgRobotList
    x-tag: robot
    x-path: /api/v1/organization/{orgname}/robots
  /api/v1/user/robots/{robot_shortname}/permissions:
    get:
      description: Returns the list of repository permissions for the user's robot.
      operationId: getUserRobotPermissions
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.UserRobotPermissions
    x-tag: robot
    x-path: /api/v1/user/robots/{robot_shortname}/permissions
  /api/v1/user/robots/{robot_shortname}/regenerate:
    post:
      description: Regenerates the token for a user's robot.
      operationId: regenerateUserRobotToken
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    x-name: endpoints.api.robot.RegenerateUserRobot
    x-tag: robot
    x-path: /api/v1/user/robots/{robot_shortname}/regenerate
  /api/v1/organization/{orgname}/robots/{robot_shortname}:
    delete:
      description: Delete an existing organization robot.
      operationId: deleteOrgRobot
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    get:
      description: Returns the organization's robot with the specified name.
      operationId: getOrgRobot
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
    put:
      description: Create a new robot in the organization.
      operationId: createOrgRobot
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateRobot'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - robot
      x-codegen-request-body-name: body
    x-name: endpoints.api.robot.OrgRobot
    x-path: /api/v1/organization/{orgname}/robots/{robot_shortname}
    x-tag: robot
  /api/v1/user/robots/{robot_shortname}:
    delete:
      description: Delete an existing robot.
      operationId: deleteUserRobot
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    get:
      description: Returns the user's robot with the specified name.
      operationId: getUserRobot
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
    put:
      description: Create a new user robot with the specified name.
      operationId: createUserRobot
      parameters:
      - description: The short name for the robot, without any user or organization
          prefix
        in: path
        name: robot_shortname
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateRobot'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - robot
      x-codegen-request-body-name: body
    x-name: endpoints.api.robot.UserRobot
    x-path: /api/v1/user/robots/{robot_shortname}
    x-tag: robot
  /api/v1/find/all:
    get:
      description: Get a list of entities and resources that match the specified query.
      operationId: conductSearch
      parameters:
      - description: The search query.
        in: query
        name: query
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - search
    x-name: endpoints.api.search.ConductSearch
    x-tag: search
    x-path: /api/v1/find/all
  /api/v1/find/repositories:
    get:
      description: Get a list of apps and repositories that match the specified query.
      operationId: conductRepoSearch
      parameters:
      - description: The page.
        in: query
        name: page
        schema:
          type: integer
      - description: The search query.
        in: query
        name: query
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - search
    x-name: endpoints.api.search.ConductRepositorySearch
    x-tag: search
    x-path: /api/v1/find/repositories
  /api/v1/entities/{prefix}:
    get:
      description: Get a list of entities that match the specified prefix.
      operationId: getMatchingEntities
      parameters:
      - in: path
        name: prefix
        required: true
        schema:
          type: string
      - description: Whether to include orgs names.
        in: query
        name: includeOrgs
        schema:
          type: boolean
      - description: Whether to include team names.
        in: query
        name: includeTeams
        schema:
          type: boolean
      - description: Namespace to use when querying for org entities.
        in: query
        name: namespace
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - search
    x-name: endpoints.api.search.EntitySearch
    x-tag: search
    x-path: /api/v1/entities/{prefix}
  /api/v1/repository/{repository}/manifest/{manifestref}/security:
    get:
      operationId: getRepoManifestSecurity
      parameters:
      - description: The digest of the manifest
        in: path
        name: manifestref
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: Include vulnerabilities informations
        in: query
        name: vulnerabilities
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - secscan
    x-name: endpoints.api.secscan.RepositoryManifestSecurity
    x-tag: secscan
    x-path: /api/v1/repository/{repository}/manifest/{manifestref}/security
  /api/v1/repository/{repository}/image/{imageid}/security:
    get:
      description: Fetches the features and vulnerabilities (if any) for a repository
        image.
      operationId: getRepoImageSecurity
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: The image ID
        in: path
        name: imageid
        required: true
        schema:
          type: string
      - description: Include vulnerabilities information
        in: query
        name: vulnerabilities
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - secscan
    x-name: endpoints.api.secscan.RepositoryImageSecurity
    x-tag: secscan
    x-path: /api/v1/repository/{repository}/image/{imageid}/security
  /api/v1/repository/{repository}/signatures:
    get:
      description: Fetches the list of signed tags for the repository.
      operationId: getRepoSignatures
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - signing
    x-name: endpoints.api.signing.RepositorySignatures
    x-tag: signing
    x-path: /api/v1/repository/{repository}/signatures
  /api/v1/repository/{repository}/tag/{tag}/images:
    get:
      description: List the images for the specified repository tag.
      operationId: listTagImages
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: If specified, only images wholely owned by this tag are returned.
        in: query
        name: owned
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - tag
    x-name: endpoints.api.tag.RepositoryTagImages
    x-tag: tag
    x-path: /api/v1/repository/{repository}/tag/{tag}/images
  /api/v1/repository/{repository}/tag/{tag}/restore:
    post:
      description: Restores a repository tag back to a previous image in the repository.
      operationId: restoreTag
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RestoreTag'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - tag
      x-codegen-request-body-name: body
    x-name: endpoints.api.tag.RestoreTag
    x-tag: tag
    x-path: /api/v1/repository/{repository}/tag/{tag}/restore
  /api/v1/repository/{repository}/tag/{tag}:
    delete:
      description: Delete the specified repository tag.
      operationId: deleteFullTag
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - tag
    put:
      description: Change which image a tag points to or create a new tag.
      operationId: changeTag
      parameters:
      - description: The name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangeTag'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:write
      tags:
      - tag
      x-codegen-request-body-name: body
    x-name: endpoints.api.tag.RepositoryTag
    x-path: /api/v1/repository/{repository}/tag/{tag}
    x-tag: tag
  /api/v1/repository/{repository}/tag/:
    get:
      operationId: listRepoTags
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: Filter to only active tags.
        in: query
        name: onlyActiveTags
        schema:
          type: boolean
      - description: Page index for the results. Default 1.
        in: query
        name: page
        schema:
          type: integer
      - description: Limit to the number of results to return per page. Max 100.
        in: query
        name: limit
        schema:
          type: integer
      - description: Filters the tags to the specific tag.
        in: query
        name: specificTag
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - tag
    x-name: endpoints.api.tag.ListRepositoryTags
    x-tag: tag
    x-path: /api/v1/repository/{repository}/tag/
  /api/v1/organization/{orgname}/team/{teamname}/members:
    get:
      description: Retrieve the list of members for the specified team.
      operationId: getOrganizationTeamMembers
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        schema:
          type: string
      - description: Whether to include pending members
        in: query
        name: includePending
        schema:
          type: boolean
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    x-name: endpoints.api.team.TeamMemberList
    x-tag: team
    x-path: /api/v1/organization/{orgname}/team/{teamname}/members
  /api/v1/organization/{orgname}/team/{teamname}/permissions:
    get:
      description: Returns the list of repository permissions for the org's team.
      operationId: getOrganizationTeamPermissions
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - team
    x-name: endpoints.api.team.TeamPermissions
    x-tag: team
    x-path: /api/v1/organization/{orgname}/team/{teamname}/permissions
  /api/v1/organization/{orgname}/team/{teamname}/invite/{email}:
    delete:
      description: Delete an invite of an email address to join a team.
      operationId: deleteTeamMemberEmailInvite
      parameters:
      - in: path
        name: orgname
        required: true
        schema:
          type: string
      - in: path
        name: email
        required: true
        schema:
          type: string
      - in: path
        name: teamname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    put:
      description: Invites an email address to an existing team.
      operationId: inviteTeamMemberEmail
      parameters:
      - in: path
        name: orgname
        required: true
        schema:
          type: string
      - in: path
        name: email
        required: true
        schema:
          type: string
      - in: path
        name: teamname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    x-name: endpoints.api.team.InviteTeamMember
    x-tag: team
    x-path: /api/v1/organization/{orgname}/team/{teamname}/invite/{email}
  /api/v1/organization/{orgname}/team/{teamname}:
    delete:
      description: Delete the specified team.
      operationId: deleteOrganizationTeam
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    put:
      description: Update the org-wide permission for the specified team.
      operationId: updateOrganizationTeam
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TeamDescription'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
      x-codegen-request-body-name: body
    x-name: endpoints.api.team.OrganizationTeam
    x-path: /api/v1/organization/{orgname}/team/{teamname}
    x-tag: team
  /api/v1/organization/{orgname}/team/{teamname}/members/{membername}:
    delete:
      description: |-
        Delete a member of a team.

                If the user is merely invited to join the team, then the invite is removed instead.
      operationId: deleteOrganizationTeamMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The username of the team member
        in: path
        name: membername
        required: true
        schema:
          type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    put:
      description: Adds or invites a member to an existing team.
      operationId: updateOrganizationTeamMember
      parameters:
      - description: The name of the organization
        in: path
        name: orgname
        required: true
        schema:
          type: string
      - description: The username of the team member
        in: path
        name: membername
        required: true
        schema:
          type: string
      - description: The name of the team
        in: path
        name: teamname
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - org:admin
      tags:
      - team
    x-name: endpoints.api.team.TeamMember
    x-path: /api/v1/organization/{orgname}/team/{teamname}/members/{membername}
    x-tag: team
  /api/v1/repository/{repository}/trigger/:
    get:
      description: List the triggers for the specified repository.
      operationId: listBuildTriggers
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    x-name: endpoints.api.trigger.BuildTriggerList
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate:
    post:
      description: Activate the specified build trigger.
      operationId: activateBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BuildTriggerActivateRequest'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
      x-codegen-request-body-name: body
    x-name: endpoints.api.trigger.BuildTriggerActivate
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/start:
    post:
      description: Manually start a build from the specified trigger.
      operationId: manuallyStartBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RunParameters'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
      x-codegen-request-body-name: body
    x-name: endpoints.api.trigger.ActivateBuildTrigger
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/start
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds:
    get:
      description: List the builds started by the specified trigger.
      operationId: listTriggerRecentBuilds
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      - description: The maximum number of builds to return
        in: query
        name: limit
        schema:
          type: integer
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    x-name: endpoints.api.trigger.TriggerBuildList
    x-tag: trigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds
  /api/v1/repository/{repository}/trigger/{trigger_uuid}:
    delete:
      description: Delete the specified build trigger.
      operationId: deleteBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    get:
      description: Get information for the specified build trigger.
      operationId: getBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
    put:
      description: Updates the specified build trigger.
      operationId: updateBuildTrigger
      parameters:
      - description: The UUID of the build trigger
        in: path
        name: trigger_uuid
        required: true
        schema:
          type: string
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateTrigger'
        description: Request body contents.
        required: true
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:admin
      tags:
      - trigger
      x-codegen-request-body-name: body
    x-name: endpoints.api.trigger.BuildTrigger
    x-path: /api/v1/repository/{repository}/trigger/{trigger_uuid}
    x-tag: trigger
  /api/v1/user/:
    get:
      description: Get user information for the authenticated user.
      operationId: getLoggedInUser
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserView'
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:read
      tags:
      - user
    x-name: endpoints.api.user.User
    x-tag: user
    x-path: /api/v1/user/
  /api/v1/users/{username}:
    get:
      description: Get user information for the specified user.
      operationId: getUserInformation
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      tags:
      - user
    x-name: endpoints.api.user.Users
    x-tag: user
    x-path: /api/v1/users/{username}
  /api/v1/user/starred:
    get:
      description: List all starred repositories.
      operationId: listStarredRepos
      parameters:
      - description: The page token for the next page
        in: query
        name: next_page
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successful invocation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - user
    post:
      description: Star a repository.
      operationId: createStar
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewStarredRepository'
        description: Request body contents.
        required: true
      responses:
        "201":
          content: {}
          description: Successful creation
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - repo:read
      tags:
      - user
      x-codegen-request-body-name: body
    x-name: endpoints.api.user.StarredRepositoryList
    x-tag: user
    x-path: /api/v1/user/starred
  /api/v1/user/starred/{repository}:
    delete:
      description: Removes a star from a repository.
      operationId: deleteStar
      parameters:
      - description: The full path of the repository. e.g. namespace/name
        in: path
        name: repository
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Bad Request
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Session required
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Not found
      security:
      - oauth2_implicit:
        - user:admin
      tags:
      - user
    x-name: endpoints.api.user.StarredRepository
    x-tag: user
    x-path: /api/v1/user/starred/{repository}
  /userfiles/{file_id}:
    x-name: data.userfiles.UserfilesHandlers
    x-tag: userfiles
    x-path: /userfiles/{file_id}
components:
  schemas:
    ChangeTag:
      description: Makes changes to a specific tag
      type: object
    RepositoryBuildRequest:
      description: Description of a new repository build.
      example:
        archive_url: archive_url
        file_id: file_id
        context: context
        docker_tags:
        - docker_tags
        - docker_tags
        dockerfile_path: dockerfile_path
        subdirectory: subdirectory
        pull_robot: pull_robot
      properties:
        subdirectory:
          description: Subdirectory in which the Dockerfile can be found. You can
            only specify this or dockerfile_path
          type: string
        archive_url:
          description: The URL of the .tar.gz to build. Must start with "http" or
            "https".
          type: string
        docker_tags:
          description: The tags to which the built images will be pushed. If none
            specified, "latest" is used.
          items:
            type: string
          minItems: 1
          type: array
          uniqueItems: true
        pull_robot:
          description: Username of a Quay robot account to use as pull credentials
          type: string
        file_id:
          description: The file id that was generated when the build spec was uploaded
          type: string
        context:
          description: Pass in the context for the dockerfile. This is optional.
          type: string
        dockerfile_path:
          description: Path to a dockerfile. You can only specify this or subdirectory.
          type: string
      type: object
    NotificationCreateRequest:
      description: Information for creating a notification on a repository
      example:
        eventConfig: '{}'
        method: method
        title: title
        event: event
        config: '{}'
      properties:
        eventConfig:
          description: JSON config information for the specific event of notification
          properties: {}
          type: object
        title:
          description: The human-readable title of the notification
          type: string
        config:
          description: JSON config information for the specific method of notification
          properties: {}
          type: object
        event:
          description: The event on which the notification will respond
          type: string
        method:
          description: The method of notification (such as email or web callback)
          type: string
      required:
      - config
      - event
      - eventConfig
      - method
      type: object
    UserPermission:
      description: Description of a user permission.
      example:
        role: read
      properties:
        role:
          description: Role to use for the user
          enum:
          - read
          - write
          - admin
          type: string
      required:
      - role
      type: object
    NewStarredRepository:
      example:
        namespace: namespace
        repository: repository
      properties:
        namespace:
          description: Namespace in which the repository belongs
          type: string
        repository:
          description: Repository name
          type: string
      required:
      - namespace
      - repository
      type: object
    CreateRobot:
      description: Optional data for creating a robot
      example:
        description: description
        unstructured_metadata: '{}'
      properties:
        unstructured_metadata:
          description: Optional unstructured metadata for the robot
          properties: {}
          type: object
        description:
          description: Optional text description for the robot
          maxLength: 255
          type: string
      type: object
    UpdateUser:
      description: Fields which can be updated in a user.
      properties:
        username:
          description: The user's username
          type: string
        invoice_email:
          description: Whether the user desires to receive an invoice email.
          type: boolean
        password:
          description: The user's password
          type: string
        email:
          description: The user's email address
          type: string
        tag_expiration_s:
          description: The number of seconds for tag expiration
          minimum: 0
          type: integer
      type: object
    BuildTriggerActivateRequest:
      example:
        config: '{}'
        pull_robot: pull_robot
      properties:
        pull_robot:
          description: The name of the robot that will be used to pull images.
          type: string
        config:
          description: Arbitrary json.
          properties: {}
          type: object
      required:
      - config
      type: object
    UpdateApp:
      description: Description of an updated application.
      example:
        application_uri: application_uri
        avatar_email: avatar_email
        name: name
        description: description
        redirect_uri: redirect_uri
      properties:
        redirect_uri:
          description: The URI for the application's OAuth redirect
          type: string
        avatar_email:
          description: The e-mail address of the avatar to use for the application
          type: string
        name:
          description: The name of the application
          type: string
        application_uri:
          description: The URI for the application's homepage
          type: string
        description:
          description: The human-readable description for the application
          type: string
      required:
      - application_uri
      - name
      - redirect_uri
      type: object
    ChangeVisibility:
      description: Change the visibility for the repository.
      example:
        visibility: public
      properties:
        visibility:
          description: Visibility which the repository will start with
          enum:
          - public
          - private
          type: string
      required:
      - visibility
      type: object
    TeamDescription:
      description: Description of a team
      example:
        role: member
        description: description
      properties:
        role:
          description: Org wide permissions that should apply to the team
          enum:
          - member
          - creator
          - admin
          type: string
        description:
          description: Markdown description for the team
          type: string
      required:
      - role
      type: object
    NewOrg:
      description: Description of a new organization.
      example:
        recaptcha_response: recaptcha_response
        name: name
        email: email
      properties:
        recaptcha_response:
          description: The (may be disabled) recaptcha response code for verification
          type: string
        name:
          description: Organization username
          type: string
        email:
          description: Organization contact email
          type: string
      required:
      - name
      type: object
    NewPrototype:
      description: Description of a new prototype
      example:
        delegate:
          kind: user
          name: name
        role: read
        activating_user:
          name: name
      properties:
        activating_user:
          $ref: '#/components/schemas/NewPrototype_activating_user'
        role:
          description: Role that should be applied to the delegate
          enum:
          - read
          - write
          - admin
          type: string
        delegate:
          $ref: '#/components/schemas/NewPrototype_delegate'
      required:
      - delegate
      - role
      type: object
    TokenPermission:
      description: Description of a token permission
      example:
        role: read
      properties:
        role:
          description: Role to use for the token
          enum:
          - read
          - write
          - admin
          type: string
      required:
      - role
      type: object
    RunParameters:
      description: Optional run parameters for activating the build trigger
      example:
        commit_sha: commit_sha
        branch_name: branch_name
      properties:
        branch_name:
          description: (SCM only) If specified, the name of the branch to build.
          type: string
        commit_sha:
          description: (Custom Only) If specified, the ref/SHA1 used to checkout a
            git repository.
          type: string
      type: object
    RepoUpdate:
      description: Fields which can be updated in a repository.
      example:
        description: description
      properties:
        description:
          description: Markdown encoded description for the repository
          type: string
      required:
      - description
      type: object
    NewRepo:
      description: Description of a new repository
      example:
        visibility: public
        namespace: namespace
        description: description
        repository: repository
      properties:
        namespace:
          description: Namespace in which the repository should be created. If omitted,
            the username of the caller is used
          type: string
        visibility:
          description: Visibility which the repository will start with
          enum:
          - public
          - private
          type: string
        repository:
          description: Repository name
          type: string
        description:
          description: Markdown encoded description for the repository
          type: string
      required:
      - description
      - repository
      - visibility
      type: object
    ApiError:
      properties:
        status:
          description: Status code of the response.
          type: integer
        error_message:
          description: Deprecated; alias for detail
          type: string
        title:
          description: Unique error code to identify the type of error.
          type: string
        error_type:
          description: Deprecated; alias for detail
          type: string
        detail:
          description: Details about the specific instance of the error.
          type: string
        type:
          description: Reference to the type of the error.
          type: string
      required:
      - status
      - title
      - type
      type: object
    CreateMessage:
      description: Create a new message
      example:
        message:
          severity: info
          media_type: text/plain
          content: content
      properties:
        message:
          $ref: '#/components/schemas/CreateMessage_message'
      type: object
    UpdateTrigger:
      description: Options for updating a build trigger
      example:
        enabled: true
      properties:
        enabled:
          description: Whether the build trigger is enabled
          type: boolean
      required:
      - enabled
      type: object
    RestoreTag:
      description: Restores a tag to a specific image
      example:
        image: image
        manifest_digest: manifest_digest
      properties:
        image:
          description: '(Deprecated: use `manifest_digest`) Image to which the tag
            should point'
          type: string
        manifest_digest:
          description: If specified, the manifest digest that should be used
          type: string
      type: object
    ApiErrorDescription:
      description: Description of an error
      example:
        description: description
        type: type
        title: downstream_issue
      properties:
        type:
          description: A reference to the error type resource
          type: string
        description:
          description: A more detailed description of the error that may include help
            for fixing the issue.
          type: string
        title:
          description: The title of the error. Can be used to uniquely identify the
            kind of error.
          enum:
          - downstream_issue
          - exceeds_license
          - expired_token
          - external_service_timeout
          - fresh_login_required
          - insufficient_scope
          - invalid_request
          - invalid_response
          - invalid_token
          - not_found
          type: string
      required:
      - description
      - title
      - type
      type: object
    PrototypeUpdate:
      description: Description of a the new prototype role
      example:
        role: read
      properties:
        role:
          description: Role that should be applied to the permission
          enum:
          - read
          - write
          - admin
          type: string
      required:
      - role
      type: object
    NewApp:
      description: Description of a new organization application.
      example:
        application_uri: application_uri
        avatar_email: avatar_email
        name: name
        description: description
        redirect_uri: redirect_uri
      properties:
        redirect_uri:
          description: The URI for the application's OAuth redirect
          type: string
        avatar_email:
          description: The e-mail address of the avatar to use for the application
          type: string
        name:
          description: The name of the application
          type: string
        application_uri:
          description: The URI for the application's homepage
          type: string
        description:
          description: The human-readable description for the application
          type: string
      required:
      - name
      type: object
    UpdateOrg:
      description: Description of updates for an existing organization
      example:
        invoice_email: true
        tag_expiration_s: 0
        email: email
      properties:
        invoice_email:
          description: Whether the organization desires to receive emails for invoices
          type: boolean
        email:
          description: Organization contact email
          type: string
        tag_expiration_s:
          description: The number of seconds for tag expiration
          minimum: 0
          type: integer
      type: object
    NewToken:
      description: Description of a new token.
      example:
        friendlyName: friendlyName
      properties:
        friendlyName:
          description: Friendly name to help identify the token
          type: string
      required:
      - friendlyName
      type: object
    NewUser:
      description: Fields which must be specified for a new user.
      properties:
        username:
          description: The user's username
          type: string
        password:
          description: The user's password
          type: string
        email:
          description: The user's email address
          type: string
        invite_code:
          description: The optional invite code
          type: string
        recaptcha_response:
          description: The (may be disabled) recaptcha response code for verification
          type: string
      required:
      - password
      - username
      type: object
    AddLabel:
      description: Adds a label to a manifest
      example:
        value: value
        key: key
      properties:
        value:
          description: The value for the label
          type: string
        key:
          description: The key for the label
          type: string
      required:
      - key
      - value
      type: object
    ChangeRepoTrust:
      description: Change the trust settings for the repository.
      example:
        trust_enabled: true
      properties:
        trust_enabled:
          description: Whether or not signing is enabled for the repository.
          type: boolean
      required:
      - trust_enabled
      type: object
    UserView:
      description: Describes a user
      example:
        can_create_repo: true
        organizations:
        - '{}'
        - '{}'
        verified: true
        anonymous: true
        avatar: '{}'
        logins:
        - '{}'
        - '{}'
        email: email
        preferred_namespace: true
      properties:
        organizations:
          description: Information about the organizations in which the user is a
            member
          items:
            properties: {}
            type: object
          type: array
        verified:
          description: Whether the user's email address has been verified
          type: boolean
        avatar:
          description: Avatar data representing the user's icon
          properties: {}
          type: object
        anonymous:
          description: true if this user data represents a guest user
          type: boolean
        logins:
          description: The list of external login providers against which the user
            has authenticated
          items:
            properties: {}
            type: object
          type: array
        can_create_repo:
          description: Whether the user has permission to create repositories
          type: boolean
        preferred_namespace:
          description: If true, the user's namespace is the preferred namespace to
            display
          type: boolean
        email:
          description: The user's email address
          type: string
      required:
      - anonymous
      - avatar
      type: object
    TeamPermission:
      description: Description of a team permission.
      example:
        role: read
      properties:
        role:
          description: Role to use for the team
          enum:
          - read
          - write
          - admin
          type: string
      required:
      - role
      type: object
    NewPrototype_activating_user:
      description: Repository creating user to whom the rule should apply
      example:
        name: name
      properties:
        name:
          description: The username for the activating_user
          type: string
      required:
      - name
      type: object
    NewPrototype_delegate:
      description: Information about the user or team to which the rule grants access
      example:
        kind: user
        name: name
      properties:
        kind:
          description: Whether the delegate is a user or a team
          enum:
          - user
          - team
          type: string
        name:
          description: The name for the delegate team or user
          type: string
      required:
      - kind
      - name
      type: object
    CreateMessage_message:
      description: A single message
      example:
        severity: info
        media_type: text/plain
        content: content
      properties:
        content:
          description: The actual message
          type: string
        media_type:
          description: The media type of the message
          enum:
          - text/plain
          - text/markdown
          type: string
        severity:
          description: The severity of the message
          enum:
          - info
          - warning
          - error
          type: string
      required:
      - content
      - media_type
      - severity
      type: object
  securitySchemes:
    oauth2_implicit:
      flows:
        implicit:
          authorizationUrl: https://quay.io/oauth/authorize
          scopes:
            repo:write: This application will be able to view, push and pull to all
              repositories to which the granting user or robot account has write access
            repo:read: This application will be able to view and pull all repositories
              visible to the granting user or robot account
            repo:create: This application will be able to create repositories in to
              any namespaces that the granting user or robot account is allowed to
              create repositories
            repo:admin: This application will have administrator access to all repositories
              to which the granting user or robot account has access
            user:admin: This application will be able to administer your account including
              creating robots and granting them permissions to your repositories.
              You should have absolute trust in the requesting application before
              granting this permission.
            org:admin: This application will be able to administer your organizations
              including creating robots, creating teams, adjusting team membership,
              and changing billing settings. You should have absolute trust in the
              requesting application before granting this permission.
            user:read: This application will be able to read user information such
              as username and email address.
      type: oauth2
x-original-swagger-version: "2.0"

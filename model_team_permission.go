/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TeamPermission Description of a team permission.
type TeamPermission struct {
	// Role to use for the team
	Role string `json:"role"`
}

// NewTeamPermission instantiates a new TeamPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamPermission(role string) *TeamPermission {
	this := TeamPermission{}
	this.Role = role
	return &this
}

// NewTeamPermissionWithDefaults instantiates a new TeamPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamPermissionWithDefaults() *TeamPermission {
	this := TeamPermission{}
	return &this
}

// GetRole returns the Role field value
func (o *TeamPermission) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *TeamPermission) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *TeamPermission) SetRole(v string) {
	o.Role = v
}

func (o TeamPermission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableTeamPermission struct {
	value *TeamPermission
	isSet bool
}

func (v NullableTeamPermission) Get() *TeamPermission {
	return v.value
}

func (v *NullableTeamPermission) Set(val *TeamPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamPermission(val *TeamPermission) *NullableTeamPermission {
	return &NullableTeamPermission{value: val, isSet: true}
}

func (v NullableTeamPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

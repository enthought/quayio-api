/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ApiErrorDescription Description of an error
type ApiErrorDescription struct {
	// A reference to the error type resource
	Type string `json:"type"`
	// A more detailed description of the error that may include help for fixing the issue.
	Description string `json:"description"`
	// The title of the error. Can be used to uniquely identify the kind of error.
	Title string `json:"title"`
}

// NewApiErrorDescription instantiates a new ApiErrorDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiErrorDescription(type_ string, description string, title string) *ApiErrorDescription {
	this := ApiErrorDescription{}
	this.Type = type_
	this.Description = description
	this.Title = title
	return &this
}

// NewApiErrorDescriptionWithDefaults instantiates a new ApiErrorDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiErrorDescriptionWithDefaults() *ApiErrorDescription {
	this := ApiErrorDescription{}
	return &this
}

// GetType returns the Type field value
func (o *ApiErrorDescription) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiErrorDescription) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiErrorDescription) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value
func (o *ApiErrorDescription) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ApiErrorDescription) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ApiErrorDescription) SetDescription(v string) {
	o.Description = v
}

// GetTitle returns the Title field value
func (o *ApiErrorDescription) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ApiErrorDescription) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ApiErrorDescription) SetTitle(v string) {
	o.Title = v
}

func (o ApiErrorDescription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableApiErrorDescription struct {
	value *ApiErrorDescription
	isSet bool
}

func (v NullableApiErrorDescription) Get() *ApiErrorDescription {
	return v.value
}

func (v *NullableApiErrorDescription) Set(val *ApiErrorDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorDescription(val *ApiErrorDescription) *NullableApiErrorDescription {
	return &NullableApiErrorDescription{value: val, isSet: true}
}

func (v NullableApiErrorDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

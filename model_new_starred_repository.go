/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NewStarredRepository struct for NewStarredRepository
type NewStarredRepository struct {
	// Namespace in which the repository belongs
	Namespace string `json:"namespace"`
	// Repository name
	Repository string `json:"repository"`
}

// NewNewStarredRepository instantiates a new NewStarredRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewStarredRepository(namespace string, repository string) *NewStarredRepository {
	this := NewStarredRepository{}
	this.Namespace = namespace
	this.Repository = repository
	return &this
}

// NewNewStarredRepositoryWithDefaults instantiates a new NewStarredRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewStarredRepositoryWithDefaults() *NewStarredRepository {
	this := NewStarredRepository{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *NewStarredRepository) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *NewStarredRepository) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *NewStarredRepository) SetNamespace(v string) {
	o.Namespace = v
}

// GetRepository returns the Repository field value
func (o *NewStarredRepository) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *NewStarredRepository) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *NewStarredRepository) SetRepository(v string) {
	o.Repository = v
}

func (o NewStarredRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	return json.Marshal(toSerialize)
}

type NullableNewStarredRepository struct {
	value *NewStarredRepository
	isSet bool
}

func (v NullableNewStarredRepository) Get() *NewStarredRepository {
	return v.value
}

func (v *NullableNewStarredRepository) Set(val *NewStarredRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableNewStarredRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableNewStarredRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewStarredRepository(val *NewStarredRepository) *NullableNewStarredRepository {
	return &NullableNewStarredRepository{value: val, isSet: true}
}

func (v NullableNewStarredRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewStarredRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

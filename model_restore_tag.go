/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RestoreTag Restores a tag to a specific image
type RestoreTag struct {
	// (Deprecated: use `manifest_digest`) Image to which the tag should point
	Image *string `json:"image,omitempty"`
	// If specified, the manifest digest that should be used
	ManifestDigest *string `json:"manifest_digest,omitempty"`
}

// NewRestoreTag instantiates a new RestoreTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreTag() *RestoreTag {
	this := RestoreTag{}
	return &this
}

// NewRestoreTagWithDefaults instantiates a new RestoreTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreTagWithDefaults() *RestoreTag {
	this := RestoreTag{}
	return &this
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *RestoreTag) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTag) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *RestoreTag) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *RestoreTag) SetImage(v string) {
	o.Image = &v
}

// GetManifestDigest returns the ManifestDigest field value if set, zero value otherwise.
func (o *RestoreTag) GetManifestDigest() string {
	if o == nil || o.ManifestDigest == nil {
		var ret string
		return ret
	}
	return *o.ManifestDigest
}

// GetManifestDigestOk returns a tuple with the ManifestDigest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTag) GetManifestDigestOk() (*string, bool) {
	if o == nil || o.ManifestDigest == nil {
		return nil, false
	}
	return o.ManifestDigest, true
}

// HasManifestDigest returns a boolean if a field has been set.
func (o *RestoreTag) HasManifestDigest() bool {
	if o != nil && o.ManifestDigest != nil {
		return true
	}

	return false
}

// SetManifestDigest gets a reference to the given string and assigns it to the ManifestDigest field.
func (o *RestoreTag) SetManifestDigest(v string) {
	o.ManifestDigest = &v
}

func (o RestoreTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.ManifestDigest != nil {
		toSerialize["manifest_digest"] = o.ManifestDigest
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreTag struct {
	value *RestoreTag
	isSet bool
}

func (v NullableRestoreTag) Get() *RestoreTag {
	return v.value
}

func (v *NullableRestoreTag) Set(val *RestoreTag) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreTag) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreTag(val *RestoreTag) *NullableRestoreTag {
	return &NullableRestoreTag{value: val, isSet: true}
}

func (v NullableRestoreTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

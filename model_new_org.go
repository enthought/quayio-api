/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NewOrg Description of a new organization.
type NewOrg struct {
	// The (may be disabled) recaptcha response code for verification
	RecaptchaResponse *string `json:"recaptcha_response,omitempty"`
	// Organization username
	Name string `json:"name"`
	// Organization contact email
	Email *string `json:"email,omitempty"`
}

// NewNewOrg instantiates a new NewOrg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewOrg(name string) *NewOrg {
	this := NewOrg{}
	this.Name = name
	return &this
}

// NewNewOrgWithDefaults instantiates a new NewOrg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewOrgWithDefaults() *NewOrg {
	this := NewOrg{}
	return &this
}

// GetRecaptchaResponse returns the RecaptchaResponse field value if set, zero value otherwise.
func (o *NewOrg) GetRecaptchaResponse() string {
	if o == nil || o.RecaptchaResponse == nil {
		var ret string
		return ret
	}
	return *o.RecaptchaResponse
}

// GetRecaptchaResponseOk returns a tuple with the RecaptchaResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewOrg) GetRecaptchaResponseOk() (*string, bool) {
	if o == nil || o.RecaptchaResponse == nil {
		return nil, false
	}
	return o.RecaptchaResponse, true
}

// HasRecaptchaResponse returns a boolean if a field has been set.
func (o *NewOrg) HasRecaptchaResponse() bool {
	if o != nil && o.RecaptchaResponse != nil {
		return true
	}

	return false
}

// SetRecaptchaResponse gets a reference to the given string and assigns it to the RecaptchaResponse field.
func (o *NewOrg) SetRecaptchaResponse(v string) {
	o.RecaptchaResponse = &v
}

// GetName returns the Name field value
func (o *NewOrg) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewOrg) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewOrg) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *NewOrg) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewOrg) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *NewOrg) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *NewOrg) SetEmail(v string) {
	o.Email = &v
}

func (o NewOrg) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecaptchaResponse != nil {
		toSerialize["recaptcha_response"] = o.RecaptchaResponse
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableNewOrg struct {
	value *NewOrg
	isSet bool
}

func (v NullableNewOrg) Get() *NewOrg {
	return v.value
}

func (v *NullableNewOrg) Set(val *NewOrg) {
	v.value = val
	v.isSet = true
}

func (v NullableNewOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableNewOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewOrg(val *NewOrg) *NullableNewOrg {
	return &NullableNewOrg{value: val, isSet: true}
}

func (v NullableNewOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

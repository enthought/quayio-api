/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// LogsApiService LogsApi service
type LogsApiService service

type ApiListOrgLogsRequest struct {
	ctx        _context.Context
	ApiService *LogsApiService
	orgname    string
	nextPage   *string
	performer  *string
	endtime    *string
	starttime  *string
}

func (r ApiListOrgLogsRequest) NextPage(nextPage string) ApiListOrgLogsRequest {
	r.nextPage = &nextPage
	return r
}
func (r ApiListOrgLogsRequest) Performer(performer string) ApiListOrgLogsRequest {
	r.performer = &performer
	return r
}
func (r ApiListOrgLogsRequest) Endtime(endtime string) ApiListOrgLogsRequest {
	r.endtime = &endtime
	return r
}
func (r ApiListOrgLogsRequest) Starttime(starttime string) ApiListOrgLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiListOrgLogsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ListOrgLogsExecute(r)
}

/*
 * ListOrgLogs Method for ListOrgLogs
 * List the logs for the specified organization.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgname The name of the organization
 * @return ApiListOrgLogsRequest
 */
func (a *LogsApiService) ListOrgLogs(ctx _context.Context, orgname string) ApiListOrgLogsRequest {
	return ApiListOrgLogsRequest{
		ApiService: a,
		ctx:        ctx,
		orgname:    orgname,
	}
}

/*
 * Execute executes the request
 */
func (a *LogsApiService) ListOrgLogsExecute(r ApiListOrgLogsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsApiService.ListOrgLogs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organization/{orgname}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgname"+"}", _neturl.PathEscape(parameterToString(r.orgname, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nextPage != nil {
		localVarQueryParams.Add("next_page", parameterToString(*r.nextPage, ""))
	}
	if r.performer != nil {
		localVarQueryParams.Add("performer", parameterToString(*r.performer, ""))
	}
	if r.endtime != nil {
		localVarQueryParams.Add("endtime", parameterToString(*r.endtime, ""))
	}
	if r.starttime != nil {
		localVarQueryParams.Add("starttime", parameterToString(*r.starttime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListRepoLogsRequest struct {
	ctx        _context.Context
	ApiService *LogsApiService
	repository string
	nextPage   *string
	endtime    *string
	starttime  *string
}

func (r ApiListRepoLogsRequest) NextPage(nextPage string) ApiListRepoLogsRequest {
	r.nextPage = &nextPage
	return r
}
func (r ApiListRepoLogsRequest) Endtime(endtime string) ApiListRepoLogsRequest {
	r.endtime = &endtime
	return r
}
func (r ApiListRepoLogsRequest) Starttime(starttime string) ApiListRepoLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiListRepoLogsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ListRepoLogsExecute(r)
}

/*
 * ListRepoLogs Method for ListRepoLogs
 * List the logs for the specified repository.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param repository The full path of the repository. e.g. namespace/name
 * @return ApiListRepoLogsRequest
 */
func (a *LogsApiService) ListRepoLogs(ctx _context.Context, repository string) ApiListRepoLogsRequest {
	return ApiListRepoLogsRequest{
		ApiService: a,
		ctx:        ctx,
		repository: repository,
	}
}

/*
 * Execute executes the request
 */
func (a *LogsApiService) ListRepoLogsExecute(r ApiListRepoLogsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsApiService.ListRepoLogs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/repository/{repository}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"repository"+"}", _neturl.PathEscape(parameterToString(r.repository, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nextPage != nil {
		localVarQueryParams.Add("next_page", parameterToString(*r.nextPage, ""))
	}
	if r.endtime != nil {
		localVarQueryParams.Add("endtime", parameterToString(*r.endtime, ""))
	}
	if r.starttime != nil {
		localVarQueryParams.Add("starttime", parameterToString(*r.starttime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListUserLogsRequest struct {
	ctx        _context.Context
	ApiService *LogsApiService
	nextPage   *string
	performer  *string
	endtime    *string
	starttime  *string
}

func (r ApiListUserLogsRequest) NextPage(nextPage string) ApiListUserLogsRequest {
	r.nextPage = &nextPage
	return r
}
func (r ApiListUserLogsRequest) Performer(performer string) ApiListUserLogsRequest {
	r.performer = &performer
	return r
}
func (r ApiListUserLogsRequest) Endtime(endtime string) ApiListUserLogsRequest {
	r.endtime = &endtime
	return r
}
func (r ApiListUserLogsRequest) Starttime(starttime string) ApiListUserLogsRequest {
	r.starttime = &starttime
	return r
}

func (r ApiListUserLogsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ListUserLogsExecute(r)
}

/*
 * ListUserLogs Method for ListUserLogs
 * List the logs for the current user.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUserLogsRequest
 */
func (a *LogsApiService) ListUserLogs(ctx _context.Context) ApiListUserLogsRequest {
	return ApiListUserLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *LogsApiService) ListUserLogsExecute(r ApiListUserLogsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogsApiService.ListUserLogs")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/logs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.nextPage != nil {
		localVarQueryParams.Add("next_page", parameterToString(*r.nextPage, ""))
	}
	if r.performer != nil {
		localVarQueryParams.Add("performer", parameterToString(*r.performer, ""))
	}
	if r.endtime != nil {
		localVarQueryParams.Add("endtime", parameterToString(*r.endtime, ""))
	}
	if r.starttime != nil {
		localVarQueryParams.Add("starttime", parameterToString(*r.starttime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

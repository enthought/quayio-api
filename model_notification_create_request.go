/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NotificationCreateRequest Information for creating a notification on a repository
type NotificationCreateRequest struct {
	// JSON config information for the specific event of notification
	EventConfig map[string]interface{} `json:"eventConfig"`
	// The human-readable title of the notification
	Title *string `json:"title,omitempty"`
	// JSON config information for the specific method of notification
	Config map[string]interface{} `json:"config"`
	// The event on which the notification will respond
	Event string `json:"event"`
	// The method of notification (such as email or web callback)
	Method string `json:"method"`
}

// NewNotificationCreateRequest instantiates a new NotificationCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationCreateRequest(eventConfig map[string]interface{}, config map[string]interface{}, event string, method string) *NotificationCreateRequest {
	this := NotificationCreateRequest{}
	this.EventConfig = eventConfig
	this.Config = config
	this.Event = event
	this.Method = method
	return &this
}

// NewNotificationCreateRequestWithDefaults instantiates a new NotificationCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationCreateRequestWithDefaults() *NotificationCreateRequest {
	this := NotificationCreateRequest{}
	return &this
}

// GetEventConfig returns the EventConfig field value
func (o *NotificationCreateRequest) GetEventConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.EventConfig
}

// GetEventConfigOk returns a tuple with the EventConfig field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetEventConfigOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventConfig, true
}

// SetEventConfig sets field value
func (o *NotificationCreateRequest) SetEventConfig(v map[string]interface{}) {
	o.EventConfig = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationCreateRequest) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationCreateRequest) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationCreateRequest) SetTitle(v string) {
	o.Title = &v
}

// GetConfig returns the Config field value
func (o *NotificationCreateRequest) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *NotificationCreateRequest) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetEvent returns the Event field value
func (o *NotificationCreateRequest) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NotificationCreateRequest) SetEvent(v string) {
	o.Event = v
}

// GetMethod returns the Method field value
func (o *NotificationCreateRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *NotificationCreateRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *NotificationCreateRequest) SetMethod(v string) {
	o.Method = v
}

func (o NotificationCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventConfig"] = o.EventConfig
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["config"] = o.Config
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["method"] = o.Method
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationCreateRequest struct {
	value *NotificationCreateRequest
	isSet bool
}

func (v NullableNotificationCreateRequest) Get() *NotificationCreateRequest {
	return v.value
}

func (v *NullableNotificationCreateRequest) Set(val *NotificationCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCreateRequest(val *NotificationCreateRequest) *NullableNotificationCreateRequest {
	return &NullableNotificationCreateRequest{value: val, isSet: true}
}

func (v NullableNotificationCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

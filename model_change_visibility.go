/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ChangeVisibility Change the visibility for the repository.
type ChangeVisibility struct {
	// Visibility which the repository will start with
	Visibility string `json:"visibility"`
}

// NewChangeVisibility instantiates a new ChangeVisibility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeVisibility(visibility string) *ChangeVisibility {
	this := ChangeVisibility{}
	this.Visibility = visibility
	return &this
}

// NewChangeVisibilityWithDefaults instantiates a new ChangeVisibility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeVisibilityWithDefaults() *ChangeVisibility {
	this := ChangeVisibility{}
	return &this
}

// GetVisibility returns the Visibility field value
func (o *ChangeVisibility) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *ChangeVisibility) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *ChangeVisibility) SetVisibility(v string) {
	o.Visibility = v
}

func (o ChangeVisibility) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["visibility"] = o.Visibility
	}
	return json.Marshal(toSerialize)
}

type NullableChangeVisibility struct {
	value *ChangeVisibility
	isSet bool
}

func (v NullableChangeVisibility) Get() *ChangeVisibility {
	return v.value
}

func (v *NullableChangeVisibility) Set(val *ChangeVisibility) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeVisibility) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeVisibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeVisibility(val *ChangeVisibility) *NullableChangeVisibility {
	return &NullableChangeVisibility{value: val, isSet: true}
}

func (v NullableChangeVisibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeVisibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NewPrototypeDelegate Information about the user or team to which the rule grants access
type NewPrototypeDelegate struct {
	// Whether the delegate is a user or a team
	Kind string `json:"kind"`
	// The name for the delegate team or user
	Name string `json:"name"`
}

// NewNewPrototypeDelegate instantiates a new NewPrototypeDelegate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewPrototypeDelegate(kind string, name string) *NewPrototypeDelegate {
	this := NewPrototypeDelegate{}
	this.Kind = kind
	this.Name = name
	return &this
}

// NewNewPrototypeDelegateWithDefaults instantiates a new NewPrototypeDelegate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewPrototypeDelegateWithDefaults() *NewPrototypeDelegate {
	this := NewPrototypeDelegate{}
	return &this
}

// GetKind returns the Kind field value
func (o *NewPrototypeDelegate) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *NewPrototypeDelegate) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *NewPrototypeDelegate) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *NewPrototypeDelegate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NewPrototypeDelegate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NewPrototypeDelegate) SetName(v string) {
	o.Name = v
}

func (o NewPrototypeDelegate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableNewPrototypeDelegate struct {
	value *NewPrototypeDelegate
	isSet bool
}

func (v NullableNewPrototypeDelegate) Get() *NewPrototypeDelegate {
	return v.value
}

func (v *NullableNewPrototypeDelegate) Set(val *NewPrototypeDelegate) {
	v.value = val
	v.isSet = true
}

func (v NullableNewPrototypeDelegate) IsSet() bool {
	return v.isSet
}

func (v *NullableNewPrototypeDelegate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewPrototypeDelegate(val *NewPrototypeDelegate) *NullableNewPrototypeDelegate {
	return &NullableNewPrototypeDelegate{value: val, isSet: true}
}

func (v NullableNewPrototypeDelegate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewPrototypeDelegate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UserView Describes a user
type UserView struct {
	// Information about the organizations in which the user is a member
	Organizations *[]map[string]interface{} `json:"organizations,omitempty"`
	// Whether the user's email address has been verified
	Verified *bool `json:"verified,omitempty"`
	// Avatar data representing the user's icon
	Avatar map[string]interface{} `json:"avatar"`
	// true if this user data represents a guest user
	Anonymous bool `json:"anonymous"`
	// The list of external login providers against which the user has authenticated
	Logins *[]map[string]interface{} `json:"logins,omitempty"`
	// Whether the user has permission to create repositories
	CanCreateRepo *bool `json:"can_create_repo,omitempty"`
	// If true, the user's namespace is the preferred namespace to display
	PreferredNamespace *bool `json:"preferred_namespace,omitempty"`
	// The user's email address
	Email *string `json:"email,omitempty"`
}

// NewUserView instantiates a new UserView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserView(avatar map[string]interface{}, anonymous bool) *UserView {
	this := UserView{}
	this.Avatar = avatar
	this.Anonymous = anonymous
	return &this
}

// NewUserViewWithDefaults instantiates a new UserView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserViewWithDefaults() *UserView {
	this := UserView{}
	return &this
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *UserView) GetOrganizations() []map[string]interface{} {
	if o == nil || o.Organizations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetOrganizationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Organizations == nil {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *UserView) HasOrganizations() bool {
	if o != nil && o.Organizations != nil {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []map[string]interface{} and assigns it to the Organizations field.
func (o *UserView) SetOrganizations(v []map[string]interface{}) {
	o.Organizations = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *UserView) GetVerified() bool {
	if o == nil || o.Verified == nil {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetVerifiedOk() (*bool, bool) {
	if o == nil || o.Verified == nil {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *UserView) HasVerified() bool {
	if o != nil && o.Verified != nil {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *UserView) SetVerified(v bool) {
	o.Verified = &v
}

// GetAvatar returns the Avatar field value
func (o *UserView) GetAvatar() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value
// and a boolean to check if the value has been set.
func (o *UserView) GetAvatarOk() (*map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avatar, true
}

// SetAvatar sets field value
func (o *UserView) SetAvatar(v map[string]interface{}) {
	o.Avatar = v
}

// GetAnonymous returns the Anonymous field value
func (o *UserView) GetAnonymous() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Anonymous
}

// GetAnonymousOk returns a tuple with the Anonymous field value
// and a boolean to check if the value has been set.
func (o *UserView) GetAnonymousOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Anonymous, true
}

// SetAnonymous sets field value
func (o *UserView) SetAnonymous(v bool) {
	o.Anonymous = v
}

// GetLogins returns the Logins field value if set, zero value otherwise.
func (o *UserView) GetLogins() []map[string]interface{} {
	if o == nil || o.Logins == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Logins
}

// GetLoginsOk returns a tuple with the Logins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetLoginsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Logins == nil {
		return nil, false
	}
	return o.Logins, true
}

// HasLogins returns a boolean if a field has been set.
func (o *UserView) HasLogins() bool {
	if o != nil && o.Logins != nil {
		return true
	}

	return false
}

// SetLogins gets a reference to the given []map[string]interface{} and assigns it to the Logins field.
func (o *UserView) SetLogins(v []map[string]interface{}) {
	o.Logins = &v
}

// GetCanCreateRepo returns the CanCreateRepo field value if set, zero value otherwise.
func (o *UserView) GetCanCreateRepo() bool {
	if o == nil || o.CanCreateRepo == nil {
		var ret bool
		return ret
	}
	return *o.CanCreateRepo
}

// GetCanCreateRepoOk returns a tuple with the CanCreateRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetCanCreateRepoOk() (*bool, bool) {
	if o == nil || o.CanCreateRepo == nil {
		return nil, false
	}
	return o.CanCreateRepo, true
}

// HasCanCreateRepo returns a boolean if a field has been set.
func (o *UserView) HasCanCreateRepo() bool {
	if o != nil && o.CanCreateRepo != nil {
		return true
	}

	return false
}

// SetCanCreateRepo gets a reference to the given bool and assigns it to the CanCreateRepo field.
func (o *UserView) SetCanCreateRepo(v bool) {
	o.CanCreateRepo = &v
}

// GetPreferredNamespace returns the PreferredNamespace field value if set, zero value otherwise.
func (o *UserView) GetPreferredNamespace() bool {
	if o == nil || o.PreferredNamespace == nil {
		var ret bool
		return ret
	}
	return *o.PreferredNamespace
}

// GetPreferredNamespaceOk returns a tuple with the PreferredNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetPreferredNamespaceOk() (*bool, bool) {
	if o == nil || o.PreferredNamespace == nil {
		return nil, false
	}
	return o.PreferredNamespace, true
}

// HasPreferredNamespace returns a boolean if a field has been set.
func (o *UserView) HasPreferredNamespace() bool {
	if o != nil && o.PreferredNamespace != nil {
		return true
	}

	return false
}

// SetPreferredNamespace gets a reference to the given bool and assigns it to the PreferredNamespace field.
func (o *UserView) SetPreferredNamespace(v bool) {
	o.PreferredNamespace = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserView) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserView) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserView) SetEmail(v string) {
	o.Email = &v
}

func (o UserView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Organizations != nil {
		toSerialize["organizations"] = o.Organizations
	}
	if o.Verified != nil {
		toSerialize["verified"] = o.Verified
	}
	if true {
		toSerialize["avatar"] = o.Avatar
	}
	if true {
		toSerialize["anonymous"] = o.Anonymous
	}
	if o.Logins != nil {
		toSerialize["logins"] = o.Logins
	}
	if o.CanCreateRepo != nil {
		toSerialize["can_create_repo"] = o.CanCreateRepo
	}
	if o.PreferredNamespace != nil {
		toSerialize["preferred_namespace"] = o.PreferredNamespace
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableUserView struct {
	value *UserView
	isSet bool
}

func (v NullableUserView) Get() *UserView {
	return v.value
}

func (v *NullableUserView) Set(val *UserView) {
	v.value = val
	v.isSet = true
}

func (v NullableUserView) IsSet() bool {
	return v.isSet
}

func (v *NullableUserView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserView(val *UserView) *NullableUserView {
	return &NullableUserView{value: val, isSet: true}
}

func (v NullableUserView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
